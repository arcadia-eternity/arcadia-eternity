# data/effect_skill.yaml
# yaml-language-server: $schema=../packages/schema/schema/effect.schema.json
# @metaType effect
# @version 1.0.0
- id: effect_skill_reduce_stat_5_percent
  trigger: OnDamage
  priority: 0
  apply: &apply_foe_statstage_-1_template
    type: statStageBuff
    target:
      base: foe
    statType: def
    value: -1
  condition: &condition_probability_5_percent_template
    type: every
    conditions:
      - type: selfUseSkill
      - type: evaluate
        target: self
        evaluator:
          type: probability
          percent: 5
- id: effect_skill_reduce_def_5_percent
  trigger: OnDamage
  priority: 0
  apply:
    <<: *apply_foe_statstage_-1_template
    statType: def
  condition: *condition_probability_5_percent_template
- id: effect_skill_reduce_spe_5_percent
  trigger: OnDamage
  priority: 0
  apply:
    <<: *apply_foe_statstage_-1_template
    statType: spe
  condition: *condition_probability_5_percent_template
- id: effect_skill_reduce_atk_5_percent
  trigger: OnDamage
  priority: 0
  apply:
    <<: *apply_foe_statstage_-1_template
    statType: atk
  condition: *condition_probability_5_percent_template
- id: effect_skill_reduce_spa_5_percent
  trigger: OnDamage
  priority: 0
  apply:
    <<: *apply_foe_statstage_-1_template
    statType: spa
  condition: *condition_probability_5_percent_template
- id: effect_skill_reduce_spd_5_percent
  trigger: OnDamage
  priority: 0
  apply:
    <<: *apply_foe_statstage_-1_template
    statType: spd
  condition: *condition_probability_5_percent_template
- id: effect_skill_raise_atk_1_stages
  trigger: BeforeHit
  priority: 0
  apply: &apply_self_statstage_+1_template
    type: statStageBuff
    target:
      base: self
    statType: atk
    value: 1
  condition: &condition_self_use_skill_template
    type: selfUseSkill
- id: effect_skill_raise_def_1_stages
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_self_statstage_+1_template
    statType: def
  condition: *condition_self_use_skill_template
- id: effect_skill_raise_spa_1_stages
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_self_statstage_+1_template
    statType: spa
  condition: *condition_self_use_skill_template
- id: effect_skill_raise_spd_1_stages
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_self_statstage_+1_template
    statType: spd
  condition: *condition_self_use_skill_template
- id: effect_skill_raise_spe_1_stages
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_self_statstage_+1_template
    statType: spe
  condition: *condition_self_use_skill_template
- id: effect_skill_raise_atk_2_stages
  trigger: BeforeHit
  priority: 0
  apply: &apply_self_statstage_+2_template
    type: statStageBuff
    target:
      base: self
    statType: atk
    value: 2
  condition: *condition_self_use_skill_template
- id: effect_skill_raise_def_2_stages
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_self_statstage_+2_template
    statType: def
  condition: *condition_self_use_skill_template
- id: effect_skill_raise_spa_2_stages
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_self_statstage_+2_template
    statType: spa
  condition: *condition_self_use_skill_template
- id: effect_skill_raise_spd_2_stages
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_self_statstage_+2_template
    statType: spd
  condition: *condition_self_use_skill_template
- id: effect_skill_raise_spe_2_stages
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_self_statstage_+2_template
    statType: spe
  condition: *condition_self_use_skill_template
- id: effect_skill_reduce_foe_stat_1_stage
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_foe_statstage_-1_template
    statType: def
  condition: *condition_self_use_skill_template
- id: effect_skill_reduce_foe_atk_1_stage
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_foe_statstage_-1_template
    statType: atk
  condition: *condition_self_use_skill_template
- id: effect_skill_reduce_foe_def_1_stage
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_foe_statstage_-1_template
    statType: def
  condition: *condition_self_use_skill_template
- id: effect_skill_reduce_foe_spa_1_stage
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_foe_statstage_-1_template
    statType: spa
  condition: *condition_self_use_skill_template
- id: effect_skill_reduce_foe_spd_1_stage
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_foe_statstage_-1_template
    statType: spd
  condition: *condition_self_use_skill_template
- id: effect_skill_reduce_foe_spe_1_stage
  trigger: BeforeHit
  priority: 0
  apply:
    <<: *apply_foe_statstage_-1_template
    statType: spe
  condition: *condition_self_use_skill_template
- id: effect_skill_add_mark_foe_ruodian
  trigger: OnHit
  priority: 0
  apply: &apply_foe_add_mark_ruodian_template
    type: addMark
    target: foe
    mark:
      type: entity:baseMark
      value: mark_ruodianjihao
    stack: 1
  condition: *condition_self_use_skill_template
- id: effect_skill_add_mark_foe_ruodian_2
  trigger: OnHit
  priority: 0
  apply:
    <<: *apply_foe_add_mark_ruodian_template
    stack: 2
  condition: *condition_self_use_skill_template
- id: effect_skill_consume_ruodian
  trigger: OnHit
  priority: -50
  apply:
    type: consumeStacks
    target:
      base: foeMarks
      chain:
        - type: whereAttr
          extractor:
            type: base
            arg: baseId
          evaluator:
            type: same
            value: mark_ruodianjihao
    value: 2
  condition: *condition_self_use_skill_template
- id: effect_skill_add_crit_rate_ruodian
  trigger: AfterUseSkillCheck
  priority: 1
  apply:
    type: addCritRate
    target:
      base: usingSkillContext
    value:
      type: dynamic
      selector:
        base: foeMarks
        chain:
          - type: whereAttr
            extractor:
              type: base
              arg: baseId
            evaluator:
              type: same
              value: mark_ruodianjihao
          - type: select
            arg:
              type: base
              arg: stack
          - type: multiply
            arg: 45
  condition: *condition_self_use_skill_template
- id: effect_skill_add_hit_result_ruodian
  trigger: AfterUseSkillCheck
  priority: 0
  apply:
    type: addMultihitResult
    target:
      base: usingSkillContext
    value:
      type: dynamic
      selector:
        base: foeMarks
        chain:
          - type: whereAttr
            extractor:
              type: base
              arg: baseId
            evaluator:
              type: same
              value: mark_ruodianjihao
          - type: select
            arg:
              type: base
              arg: stack
  condition: *condition_self_use_skill_template
- id: effect_skill_add_power_50_ruodian
  trigger: AfterUseSkillCheck
  priority: 0
  apply:
    type: addPower
    target:
      base: usingSkillContext
    value:
      type: dynamic
      selector:
        base: foeMarks
        chain:
          - type: whereAttr
            extractor:
              type: base
              arg: baseId
            evaluator:
              type: same
              value: mark_ruodianjihao
          - type: select
            arg:
              type: base
              arg: stack
          - type: multiply
            arg: 50
  condition: *condition_self_use_skill_template
- id: effect_skill_add_mark_foe_yishang
  trigger: OnHit
  priority: 0
  apply:
    type: addMark
    target: foe
    mark:
      type: entity:baseMark
      value: mark_yishang
  condition: *condition_self_use_skill_template
- id: effect_skill_add_mark_foe_shaoshang_5_percent
  trigger: OnHit
  priority: 0
  apply: &apply_foe_add_mark_shaoshang_template
    type: addMark
    target: foe
    mark:
      type: entity:baseMark
      value: mark_shaoshang
  condition:
    type: every
    conditions:
      - type: selfUseSkill
      - *condition_probability_5_percent_template
      - &condition_foe_not_fire_element
        type: evaluate
        target:
          base: foe
          chain:
            - type: select
              arg:
                type: base
                arg: element
        evaluator:
          type: notSame
          value: Fire
- id: effect_skill_add_mark_foe_shaoshang_10_percent
  trigger: OnHit
  priority: 0
  apply: *apply_foe_add_mark_shaoshang_template
  condition:
    type: every
    conditions:
      - type: selfUseSkill
      - &condition_probability_10_percent_template
        type: evaluate
        target: self
        evaluator:
          type: probability
          percent: 10
      - *condition_foe_not_fire_element
- id: effect_skill_add_mark_foe_shaoshang_50_percent
  trigger: OnHit
  priority: 0
  apply: *apply_foe_add_mark_shaoshang_template
  condition:
    type: every
    conditions:
      - type: selfUseSkill
      - *condition_foe_not_fire_element
      - &condition_probability_50_percent_template
        type: evaluate
        target: self
        evaluator:
          type: probability
          percent: 50
- id: effect_skill_min_damage_100
  trigger: OnDamage
  priority: 0
  apply:
    type: addThreshold
    target: damageContext
    min: 100
  condition: *condition_self_use_skill_template
- id: effect_skill_add_mark_yanggong
  trigger: OnHit
  priority: 0
  apply:
    type: addMark
    target: self
    mark:
      type: entity:baseMark
      value: mark_yanggong
  condition: *condition_self_use_skill_template
- id: effect_skill_add_mark_jizhong
  trigger: OnHit
  priority: 0
  apply:
    type: addMark
    target: self
    mark:
      type: entity:baseMark
      value: mark_bizhong
  condition: *condition_self_use_skill_template
- id: effect_skill_add_mark_busi
  trigger: OnHit
  priority: 0
  apply:
    type: addMark
    target: self
    mark:
      type: entity:baseMark
      value: mark_busi
  condition: *condition_self_use_skill_template
- id: effect_skill_add_mark_yanzhiyizhi
  trigger: OnHit
  priority: 0
  apply:
    type: addMark
    target: self
    mark:
      type: entity:baseMark
      value: mark_weilifanbei
  condition: *condition_self_use_skill_template
- id: effect_skill_reduce_self_hp_1_6
  trigger: BeforeHit
  priority: 0
  apply:
    type: dealDamage
    target:
      base: self
    value:
      type: dynamic
      selector:
        base: self
        chain:
          - type: select
            arg:
              type: base
              arg: maxHp
          - type: divide
            arg: 6
  condition: *condition_self_use_skill_template
- id: effect_skill_add_rage_35
  trigger: OnHit
  priority: 0
  apply:
    type: addRage
    target:
      base: self
    value: 35
  condition: *condition_self_use_skill_template
- id: effect_skill_power_4x_below_1_6_hp
  trigger: BeforeUseSkillCheck
  priority: 0
  apply:
    type: amplifyPower
    target:
      base: usingSkillContext
    value: 4
  condition:
    type: every
    conditions:
      - type: selfUseSkill
      - type: evaluate
        target:
          base: self
          chain:
            - type: select
              arg:
                type: base
                arg: currentHp
        evaluator:
          type: compare
          operator: <=
          value:
            type: dynamic
            selector:
              base: self
              chain:
                - type: select
                  arg:
                    type: base
                    arg: maxHp
                - type: divide
                  arg: 6
- id: effect_heal_self_half
  trigger: OnHit
  priority: 0
  apply:
    type: heal
    target:
      base: self
    value:
      type: dynamic
      selector:
        base: self
        chain:
          - type: select
            arg:
              type: base
              arg: maxHp
          - type: divide
            arg: 2
  condition: *condition_self_use_skill_template
- id: effect_heal_self_onethird
  trigger: OnHit
  priority: 0
  apply:
    type: heal
    target:
      base: self
    value:
      type: dynamic
      selector:
        base: self
        chain:
          - type: select
            arg:
              type: base
              arg: maxHp
          - type: divide
            arg: 3
  condition: *condition_self_use_skill_template
- id: effect_heal_self_quarter
  trigger: OnHit
  priority: 0
  apply:
    type: heal
    target:
      base: self
    value:
      type: dynamic
      selector:
        base: self
        chain:
          - type: select
            arg:
              type: base
              arg: maxHp
          - type: divide
            arg: 4
- id: effect_skill_add_mark_zhongzinengliang
  trigger: OnHit
  priority: 0
  apply:
    type: addMark
    target: self
    mark:
      type: entity:baseMark
      value: mark_zhongzinengliang
    stack: 4
  condition: *condition_self_use_skill_template
- id: effect_skill_consume_all_zhongzinengliang
  trigger: OnHit
  priority: -50
  apply:
    type: consumeStacks
    target:
      base: selfMarks
      chain:
        - type: whereAttr
          extractor:
            type: base
            arg: baseId
          evaluator:
            type: same
            value: mark_zhongzinengliang
    value: 4
  condition: *condition_self_use_skill_template
- id: effect_skill_add_power_25_zhongzinengliang
  trigger: AfterUseSkillCheck
  priority: 0
  apply:
    type: addPower
    target:
      base: usingSkillContext
    value:
      type: dynamic
      selector:
        base: selfMarks
        chain:
          - type: whereAttr
            extractor:
              type: base
              arg: baseId
            evaluator:
              type: same
              value: mark_zhongzinengliang
          - type: select
            arg:
              type: base
              arg: stack
          - type: multiply
            arg: 25
  condition: *condition_self_use_skill_template
- id: effect_skill_heal_by_damage_25_zhongzinengliang
  trigger: PostDamage
  priority: 0
  apply:
    type: heal
    target:
      base: self
    value:
      type: dynamic
      selector:
        base: damageContext
        chain:
          - type: selectPath
            arg: damageResult
          - type: divide
            arg: 4
          - type: multiply
            arg:
              type: dynamic
              selector:
                base: selfMarks
                chain:
                  - type: whereAttr
                    extractor:
                      type: base
                      arg: baseId
                    evaluator:
                      type: same
                      value: mark_zhongzinengliang
                  - type: select
                    arg:
                      type: base
                      arg: stack
  condition: *condition_self_use_skill_template
- id: effect_skill_add_mark_foe_mingzhongdixia
  trigger: OnHit
  priority: 0
  apply:
    type: addMark
    target: foe
    mark:
      type: entity:baseMark
      value: mark_mingzhongdixia
  condition: *condition_self_use_skill_template
- id: effect_skill_foe_clear_stage
  trigger: OnHit
  priority: 0
  apply:
    type: clearStatStage
    target: foe
  condition: *condition_self_use_skill_template
- id: effect_skill_power_2x_foe_below_quarter_hp
  trigger: BeforeUseSkillCheck
  priority: 0
  apply:
    type: amplifyPower
    target:
      base: usingSkillContext
    value: 2
  condition:
    type: every
    conditions:
      - type: selfUseSkill
      - type: evaluate
        target:
          base: foe
          chain:
            - type: select
              arg:
                type: base
                arg: currentHp
        evaluator:
          type: compare
          operator: <=
          value:
            type: dynamic
            selector:
              base: foe
              chain:
                - type: select
                  arg:
                    type: base
                    arg: maxHp
                - type: divide
                  arg: 4
- id: effect_skill_add_mark_foe_jishengzhadan
  trigger: OnHit
  priority: 0
  apply:
    type: addMark
    target: foe
    mark:
      type: entity:baseMark
      value: mark_jishengzhadan
  condition: *condition_self_use_skill_template
- id: effect_skill_ignite_foe_mark_jishengzhadan
  trigger: OnHit
  priority: 0
  apply:
    - type: destroyMark
      target:
        base: foeMarks
        chain:
          - type: whereAttr
            extractor: baseId
            evaluator:
              type: same
              value: mark_jishengzhadan
    - type: dealDamage
      target: foe
      value: 300
  condition:
    type: every
    conditions:
      - type: selfUseSkill
      - type: evaluate
        target:
          base: foeMarks
          chain:
            - type: whereAttr
              extractor: baseId
              evaluator:
                type: same
                value: mark_jishengzhadan
        evaluator:
          type: exist
- id: effect_skill_add_mark_foe_jisheng
  trigger: OnHit
  priority: 0
  apply:
    type: addMark
    target: foe
    mark:
      type: entity:baseMark
      value: mark_jisheng
  condition: *condition_self_use_skill_template
- id: effect_skill_add_mark_foe_liuxie_with_zhongzinengliang
  trigger: OnHit
  priority: 0
  apply:
    type: addMark
    target: foe
    mark:
      type: entity:baseMark
      value: mark_liuxie
    duration:
      type: dynamic
      selector:
        base: selfMarks
        chain:
          - type: whereAttr
            extractor:
              type: base
              arg: baseId
            evaluator:
              type: same
              value: mark_zhongzinengliang
          - type: select
            arg:
              type: base
              arg: stack
          - type: add
            arg: 3
    stack: 50
  condition: *condition_self_use_skill_template
- id: effect_skill_add_mark_foe_nishui
  trigger: OnHit
  priority: 0
  apply:
    type: addMark
    target: foe
    mark:
      type: entity:baseMark
      value: mark_nishui
  condition:
    type: every
    conditions:
      - *condition_self_use_skill_template
      - &condition_foe_not_water_element
        type: evaluate
        target:
          base: foe
          chain:
            - type: select
              arg:
                type: base
                arg: element
        evaluator:
          type: notSame
          value: Water
- id: effect_skill_add_mark_foe_nishui_10_percent
  trigger: OnHit
  priority: 0
  apply:
    type: addMark
    target: foe
    mark:
      type: entity:baseMark
      value: mark_nishui
  condition:
    type: every
    conditions:
      - type: selfUseSkill
      - *condition_probability_10_percent_template
      - *condition_foe_not_water_element
- id: effect_skill_add_mark_huifu
  trigger: OnHit
  priority: 0
  apply:
    type: addMark
    target: self
    mark:
      type: entity:baseMark
      value: mark_huifu
  condition: *condition_self_use_skill_template
