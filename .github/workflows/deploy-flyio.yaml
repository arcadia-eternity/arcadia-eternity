name: Deploy to Fly.io (Production)

on:
  # 当production分支有push时自动部署
  push:
    branches: [production]
  # 手动触发
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'production'
        type: choice
        options:
          - production
      version:
        description: 'Version to deploy'
        required: false
        type: string

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy:
    name: Deploy to Fly.io (Production)
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name || inputs.version || 'main' }}

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          elif [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION="latest"
          fi
          # 移除v前缀
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying production version: $VERSION"

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine production image reference
        id: image-info
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository }}"
          VERSION="${{ steps.version.outputs.version }}"

          if [ "$VERSION" = "latest" ]; then
            IMAGE_REF="${IMAGE_NAME}:production"
          else
            IMAGE_REF="${IMAGE_NAME}:v${VERSION}"
          fi

          echo "Using production image: $IMAGE_REF"
          echo "image-ref=$IMAGE_REF" >> $GITHUB_OUTPUT

      - name: Deploy to production
        run: |
          echo "Deploying to production with image: ${{ steps.image-info.outputs.image-ref }}"
          echo "Version: ${{ steps.version.outputs.version }}"

          # Deploy using the production image
          flyctl deploy \
            --image "${{ steps.image-info.outputs.image-ref }}" \
            --remote-only \
            --wait-timeout 600 \
            --verbose
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Verify production deployment
        run: |
          echo "Production deployment completed successfully!"
          echo "Production URL: https://test-battle.fly.dev"
          echo "Version: ${{ steps.version.outputs.version }}"

          # Wait for app to start
          sleep 60
          if curl -f https://test-battle.fly.dev/health > /dev/null 2>&1; then
            echo "✅ Production health check passed!"
          else
            echo "⚠️  Production health check failed, but deployment may still be starting up"
          fi
