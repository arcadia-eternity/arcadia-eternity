name: Release Tauri App

on:
  # 通过repository_dispatch触发
  repository_dispatch:
    types: [production-release]
  # 手动触发
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-15' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-15' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ startsWith(matrix.platform, 'macos') && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './packages/web-ui/src-tauri -> target'

      - name: install frontend dependencies
        run: pnpm install

      - name: Build workspace packages
        run: pnpm run build:package

      - name: Get version from repository dispatch or workflow dispatch
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            VERSION="${{ github.event.client_payload.tag_name }}"
          else
            # 从package.json读取版本号作为fallback
            VERSION="v$(node -p "require('./package.json').version")"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          CI: true
          VITE_IS_TAURI: true
          GITHUB_SHA: ${{ github.sha }}
          COMMIT_HASH: ${{ github.sha }}
        with:
          # 使用现有的release，不创建新的release
          releaseId: ${{ steps.version.outputs.version }}
          updaterJsonPreferNsis: true
          args: ${{ matrix.args }}
          projectPath: './packages/web-ui'
          includeUpdaterJson: true
          includeDebug: false

      - name: Verify app bundle creation (macOS only)
        if: startsWith(matrix.platform, 'macos')
        run: |
          echo "Checking for app bundle files..."
          find ./packages/web-ui/src-tauri/target -name "*.app" -type d || echo "No app bundle found"
          ls -la ./packages/web-ui/src-tauri/target/*/release/bundle/macos/ || echo "macOS bundle directory not found"

  notify:
    needs: publish-tauri
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify completion
        run: |
          if [ "${{ needs.publish-tauri.result }}" == "success" ]; then
            echo "✅ Release completed successfully!"
          else
            echo "❌ Release failed!"
            echo "Release result: ${{ needs.publish-tauri.result }}"
          fi
